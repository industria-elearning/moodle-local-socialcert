{"version":3,"file":"copyhtml.min.js","sources":["../src/copyhtml.js"],"sourcesContent":["/* eslint-disable */\r\n/**\r\n * Copy visible HTML as rich clipboard content.\r\n * Módulo: local_socialcert/copyhtml (Moodle deduce el nombre por la ruta del archivo).\r\n */\r\n\r\n\r\n/**\r\n * Engancha eventos de click para copiar el HTML del target indicado\r\n * en data-target del botón (id del contenedor del artículo).\r\n *\r\n * @param {String} selector CSS para el botón (opcional)\r\n */\r\nexport const init = (selector = '[data-action=\"copy-as-html\"]') => {\r\n    document.addEventListener('click', async (e) => {\r\n        const btn = e.target.closest(selector);\r\n        if (!btn) {\r\n            return;\r\n        }\r\n\r\n        const targetId = btn.dataset.target;\r\n        if (!targetId) {\r\n            Notification.exception({message: 'Falta data-target en el botón.'});\r\n            return;\r\n        }\r\n\r\n        const node = document.getElementById(targetId);\r\n        if (!node) {\r\n            Notification.exception({message: `No se encontró #${targetId}.`});\r\n            return;\r\n        }\r\n\r\n        const html = node.innerHTML;\r\n\r\n        try {\r\n            // Intento moderno: portapapeles\r\n            await navigator.clipboard.writeText(html);\r\n            Notification.addNotification({\r\n                message: M.util.get_string('copied', 'moodle') || 'Copiado al portapapeles.',\r\n                type: 'success'\r\n            });\r\n        } catch (err) {\r\n            // Fallback: selecciona y copia\r\n            const ta = document.createElement('textarea');\r\n            ta.value = html;\r\n            ta.setAttribute('readonly', '');\r\n            ta.style.position = 'absolute';\r\n            ta.style.left = '-9999px';\r\n            document.body.appendChild(ta);\r\n            ta.select();\r\n            try {\r\n                document.execCommand('copy');\r\n                Notification.addNotification({message: 'Copiado al portapapeles.', type: 'success'});\r\n            } catch (err2) {\r\n                Notification.exception(err2);\r\n            } finally {\r\n                document.body.removeChild(ta);\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n\r\n\r\n// ✅ ES Modules: export default { init }\r\n// const writeStatus = (el, msg) => { if (el) el.textContent = msg; };\r\n\r\n// const copyAsHtml = async (container, statusEl) => {\r\n\r\n//   const html = container?.innerHTML ?? '';\r\n//   const text = container?.innerText ?? container?.textContent ?? '';\r\n\r\n//   console.debug('Copying HTML:', html);\r\n//   console.debug('Copying text:', text);\r\n\r\n//   // Modern Clipboard API primero.\r\n//   if (navigator.clipboard && window.ClipboardItem) {\r\n//     try {\r\n//       const item = new ClipboardItem({\r\n//         'text/html': new Blob([html], { type: 'text/html' }),\r\n//         'text/plain': new Blob([text], { type: 'text/plain' }),\r\n//       });\r\n//       await navigator.clipboard.write([item]);\r\n//       writeStatus(statusEl, 'Copied (rich HTML).');\r\n//       return true;\r\n//     } catch {\r\n//       // fallback abajo\r\n//     }\r\n//   }\r\n\r\n//   // Fallback: contenteditable + execCommand.\r\n//   const sandbox = document.createElement('div');\r\n//   sandbox.setAttribute('contenteditable', 'true');\r\n//   Object.assign(sandbox.style, {\r\n//     position: 'fixed',\r\n//     left: '-99999px',\r\n//     whiteSpace: 'pre-wrap',\r\n//   });\r\n//   sandbox.innerHTML = html;\r\n//   document.body.appendChild(sandbox);\r\n\r\n//   const range = document.createRange();\r\n//   range.selectNodeContents(sandbox);\r\n//   const sel = window.getSelection();\r\n//   sel.removeAllRanges();\r\n//   sel.addRange(range);\r\n\r\n//   let ok = false;\r\n//   try {\r\n//     ok = document.execCommand('copy');\r\n//     writeStatus(statusEl, ok ? 'Copied (rich HTML).' : 'Copy failed.');\r\n//   } catch {\r\n//     writeStatus(statusEl, 'Copy failed.');\r\n//   } finally {\r\n//     sel.removeAllRanges();\r\n//     sandbox.remove();\r\n//   }\r\n//   return ok;\r\n// };\r\n\r\n// function init(root) {\r\n//   const el = root || document;\r\n//   el.addEventListener('click', async (ev) => {\r\n//     const btn = ev.target.closest('button[data-action=\"copy-as-html\"]');\r\n//     if (!btn) return;\r\n\r\n//     const targetId = btn.getAttribute('data-target');\r\n//     const container = document.getElementById(targetId);\r\n//     const statusEl = targetId ? el.querySelector(`#${targetId.replace('content', 'status')}`) : null;\r\n//     if (!container) return;\r\n\r\n//     btn.disabled = true;\r\n//     const prev = btn.textContent;\r\n//     btn.textContent = 'Copying…';\r\n//     await copyAsHtml(container, statusEl);\r\n//     btn.textContent = prev;\r\n//     btn.disabled = false;\r\n//   });\r\n// }\r\n"],"names":["selector","document","addEventListener","async","btn","e","target","closest","targetId","dataset","Notification","exception","message","node","getElementById","html","innerHTML","navigator","clipboard","writeText","addNotification","M","util","get_string","type","err","ta","createElement","value","setAttribute","style","position","left","body","appendChild","select","execCommand","err2","removeChild"],"mappings":"8JAaoB,eAACA,gEAAW,+BAC5BC,SAASC,iBAAiB,SAASC,MAAAA,UACzBC,IAAMC,EAAEC,OAAOC,QAAQP,cACxBI,iBAICI,SAAWJ,IAAIK,QAAQH,WACxBE,qBACDE,aAAaC,UAAU,CAACC,QAAS,yCAI/BC,KAAOZ,SAASa,eAAeN,cAChCK,iBACDH,aAAaC,UAAU,CAACC,kCAA4BJ,sBAIlDO,KAAOF,KAAKG,oBAIRC,UAAUC,UAAUC,UAAUJ,MACpCL,aAAaU,gBAAgB,CACzBR,QAASS,EAAEC,KAAKC,WAAW,SAAU,WAAa,2BAClDC,KAAM,YAEZ,MAAOC,WAECC,GAAKzB,SAAS0B,cAAc,YAClCD,GAAGE,MAAQb,KACXW,GAAGG,aAAa,WAAY,IAC5BH,GAAGI,MAAMC,SAAW,WACpBL,GAAGI,MAAME,KAAO,UAChB/B,SAASgC,KAAKC,YAAYR,IAC1BA,GAAGS,aAEClC,SAASmC,YAAY,QACrB1B,aAAaU,gBAAgB,CAACR,QAAS,2BAA4BY,KAAM,YAC3E,MAAOa,MACL3B,aAAaC,UAAU0B,cAEvBpC,SAASgC,KAAKK,YAAYZ"}