{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// amd/src/actions.js\n\n/**\n * Mapa de acciones: nombre -> handler(ev, el)\n * @type {Map<string, Function>}\n */\nconst registry = new Map();\n\n/**\n * Delegación de eventos: escucha en `root` y, si el objetivo o un ancestro\n * coincide con `selector`, ejecuta `handler(ev, targetMatch)`.\n * @param {HTMLElement} root     Contenedor raíz donde delegar\n * @param {string} selector      Selector a matchear (con closest)\n * @param {string} type          Tipo de evento (p.ej., 'click')\n * @param {(ev:Event, el:HTMLElement)=>void} handler  Manejador\n * @returns {void}\n */\nfunction on(root, selector, type, handler) {\n  root.addEventListener(type, (ev) => {\n    const target = ev.target.closest(selector);\n    if (!target || !root.contains(target)) {\n      return;\n    }\n    handler(ev, target);\n  });\n}\n\n/**\n * Muestra/oculta nodos según el estado actual de red en `root.dataset.network`.\n * Cada bloque sensible debe declarar `data-visible-on=\"linkedin twitter ...\"`\n * @param {HTMLElement} root  Contenedor raíz con data-network\n * @returns {void}\n */\nfunction updateVisibility(root) {\n  const current = root.dataset.network || '';\n  root.querySelectorAll('[data-visible-on]').forEach(el => {\n    const allowed = (el.getAttribute('data-visible-on') || '').split(/\\s+/);\n    if (allowed.includes(current)) {\n      el.classList.remove('d-none');\n    } else {\n      el.classList.add('d-none');\n    }\n  });\n}\n\n/**\n * Selecciona pestaña/red (data-network), actualiza aria-selected y visibilidad.\n * @param {MouseEvent} ev\n * @param {HTMLElement} el  Botón con data-network=\"...\"\n * @returns {void}\n */\nexport function handleSelectNetwork(ev, el) {\n  ev.preventDefault();\n  const root = el.closest('.local-socialcert');\n  if (!root) {\n    return;\n  }\n\n  const next = el.dataset.network;\n  if (!next) {\n    return;\n  }\n\n  // Estado\n  root.dataset.network = next;\n\n  // Toggle visual en el grupo\n  const group = el.closest('.lsc-social-tabs');\n  if (group) {\n    group.querySelectorAll('[data-action=\"select-network\"]').forEach(b => {\n      b.classList.toggle('active', b === el);\n      b.setAttribute('aria-selected', b === el ? 'true' : 'false');\n    });\n  }\n\n  // Mostrar/ocultar secciones\n  updateVisibility(root);\n}\n\n/**\n * Abre un enlace en nueva pestaña. Usa href o data-url.\n * Marca aria-busy brevemente como feedback.\n * @param {MouseEvent} ev\n * @param {HTMLElement} el\n * @returns {void}\n */\nfunction handleOpenLink(ev, el) {\n  // Si es <a> con href, dejamos que el browser lo haga,\n  // pero añadimos un pequeño “busy”/tracking si quieres.\n  // Si NO quieres prevenir, comenta la línea de preventDefault.\n  ev.preventDefault();\n\n  el.setAttribute('aria-busy', 'true');\n  // Si el elemento no tiene href (ej. <button>), abrimos data-url:\n  const url = el.getAttribute('href') || el.dataset.url;\n  if (url) {\n    window.open(url, '_blank', 'noopener');\n  }\n  // Quita busy luego de un tick\n  setTimeout(() => el.removeAttribute('aria-busy'), 300);\n}\n\n/**\n * Copia el HTML interno del selector dado en data-target.\n * @param {MouseEvent} _ev\n * @param {HTMLElement} el\n * @returns {void}\n */\nfunction handleCopyHtml(_ev, el) {\n  const sel = el.dataset.target || '';\n  const node = sel ? document.querySelector(sel) : null;\n  if (!node) {\n    return;\n  }\n  // Copia HTML\n  const html = node.innerHTML;\n  navigator.clipboard.writeText(html).catch(() => { /* fallback opcional */ });\n}\n\n/**\n * Copia la URL src de la imagen indicada en data-target.\n * @param {MouseEvent} _ev\n * @param {HTMLElement} el\n * @returns {void}\n */\nfunction handleCopyImage(_ev, el) {\n  const sel = el.dataset.target || '';\n  const img = sel ? document.querySelector(sel) : null;\n  if (!img) {\n    return;\n  }\n  // Copiar URL de imagen (sencillo y compatible)\n  const src = img.getAttribute('src');\n  if (src) {\n    navigator.clipboard.writeText(src);\n  }\n}\n\n/**\n * Registra una acción para usar con data-action=\"name\".\n * @param {string} name\n * @param {(ev:Event, el:HTMLElement)=>void} fn\n * @returns {void}\n */\nexport function register(name, fn) { registry.set(name, fn); }\n\n/**\n * Punto de entrada: registra handlers base y activa la delegación de clicks.\n * @returns {void}\n */\nexport function init() {\n  const root = document.querySelector('.local-socialcert');\n  if (!root) {\n    return;\n  }\n\n  // ⬇️ FALTABA registrar el selector de red\n  register('select-network', handleSelectNetwork);\n  updateVisibility(root);\n\n  // Registra acciones base\n  register('open-link', handleOpenLink);\n  register('copy-html', handleCopyHtml);\n  register('copy-image', handleCopyImage);\n\n  // Delegación única para todos los clicks con data-action\n  on(root, '[data-action]', 'click', (ev, el) => {\n    const action = el.dataset.action;\n    const fn = registry.get(action);\n    if (fn) {\n      fn(ev, el);\n    }\n  });\n\n  // ⬇️ Calcula visibilidad inicial según data-network del root\n  updateVisibility(root);\n}\n"],"names":["root","document","querySelector","register","handleSelectNetwork","updateVisibility","handleOpenLink","handleCopyHtml","handleCopyImage","selector","type","handler","addEventListener","ev","target","closest","contains","on","el","action","dataset","fn","registry","get","Map","current","network","querySelectorAll","forEach","getAttribute","split","includes","classList","remove","add","preventDefault","next","group","b","toggle","setAttribute","url","window","open","setTimeout","removeAttribute","_ev","sel","node","html","innerHTML","navigator","clipboard","writeText","catch","img","src","name","set"],"mappings":"0MAuJQA,KAAOC,SAASC,cAAc,yBAC/BF,YAKLG,SAAS,iBAAkBC,qBAC3BC,iBAAiBL,MAGjBG,SAAS,YAAaG,gBACtBH,SAAS,YAAaI,gBACtBJ,SAAS,aAAcK,0BAlJbR,KAAMS,SAAUC,KAAMC,SAChCX,KAAKY,iBAAiBF,MAAOG,WACrBC,OAASD,GAAGC,OAAOC,QAAQN,UAC5BK,QAAWd,KAAKgB,SAASF,SAG9BH,QAAQE,GAAIC,WA+IdG,CAAGjB,KAAM,gBAAiB,SAAS,CAACa,GAAIK,YAChCC,OAASD,GAAGE,QAAQD,OACpBE,GAAKC,SAASC,IAAIJ,QACpBE,IACFA,GAAGR,GAAIK,OAKXb,iBAAiBL,wCAzKbsB,SAAW,IAAIE,aA2BZnB,iBAAiBL,YAClByB,QAAUzB,KAAKoB,QAAQM,SAAW,GACxC1B,KAAK2B,iBAAiB,qBAAqBC,SAAQV,MAChCA,GAAGW,aAAa,oBAAsB,IAAIC,MAAM,OACrDC,SAASN,SACnBP,GAAGc,UAAUC,OAAO,UAEpBf,GAAGc,UAAUE,IAAI,sBAWP9B,oBAAoBS,GAAIK,IACtCL,GAAGsB,uBACGnC,KAAOkB,GAAGH,QAAQ,yBACnBf,kBAICoC,KAAOlB,GAAGE,QAAQM,YACnBU,YAKLpC,KAAKoB,QAAQM,QAAUU,WAGjBC,MAAQnB,GAAGH,QAAQ,oBACrBsB,OACFA,MAAMV,iBAAiB,kCAAkCC,SAAQU,IAC/DA,EAAEN,UAAUO,OAAO,SAAUD,IAAMpB,IACnCoB,EAAEE,aAAa,gBAAiBF,IAAMpB,GAAK,OAAS,YAKxDb,iBAAiBL,eAUVM,eAAeO,GAAIK,IAI1BL,GAAGsB,iBAEHjB,GAAGsB,aAAa,YAAa,cAEvBC,IAAMvB,GAAGW,aAAa,SAAWX,GAAGE,QAAQqB,IAC9CA,KACFC,OAAOC,KAAKF,IAAK,SAAU,YAG7BG,YAAW,IAAM1B,GAAG2B,gBAAgB,cAAc,cAS3CtC,eAAeuC,IAAK5B,UACrB6B,IAAM7B,GAAGE,QAAQN,QAAU,GAC3BkC,KAAOD,IAAM9C,SAASC,cAAc6C,KAAO,SAC5CC,kBAICC,KAAOD,KAAKE,UAClBC,UAAUC,UAAUC,UAAUJ,MAAMK,OAAM,kBASnC9C,gBAAgBsC,IAAK5B,UACtB6B,IAAM7B,GAAGE,QAAQN,QAAU,GAC3ByC,IAAMR,IAAM9C,SAASC,cAAc6C,KAAO,SAC3CQ,iBAICC,IAAMD,IAAI1B,aAAa,OACzB2B,KACFL,UAAUC,UAAUC,UAAUG,cAUlBrD,SAASsD,KAAMpC,IAAMC,SAASoC,IAAID,KAAMpC"}